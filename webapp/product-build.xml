<?xml version="1.0" encoding="UTF-8"?>

<!-- $This file is distributed under the terms of the license in /doc/license.txt$ -->

<!-- ====================================================================== 
     Build script for the Vivo Products.
                   
     jeb228                                                                
     ======================================================================-->
<project name="vivoProduct" default="describe">

	<!--
     This script should not be run on its own. 
     It should only be run from the build script of an individual Product.
    -->
	<fail>
		<condition>
			<equals arg1="${ant.file.vivoProduct}" arg2="${ant.file}" />
		</condition>
        This script should not be run by itself.
        It should be invoked from the build script of a Vivo product.
    </fail>

	<!-- 
		The build directory goes in the product directory. 
		Everything else hangs from the build directory. 
	-->
	<property name="build.dir" location="./.build" />
	<property name="appbase.dir" location="${build.dir}/appBase" />

	<dirname property="vivoProduct.basedir" file="${ant.file.vivoProduct}" />
	<path id="anttasks.classpath">
		<pathelement location="${vivoProduct.basedir}/../utilities/anttasks/classes" />
	</path>

	<!-- - - - - - - - - - - - - - - - - - 
          target: prepare                      
         - - - - - - - - - - - - - - - - - -->
	<target name="prepare" depends="compileUtilities,product-prepare,vitroCore.prepare" />

	<!-- - - - - - - - - - - - - - - - - - 
          target: product-prepare                      
         - - - - - - - - - - - - - - - - - -->
	<target name="product-prepare">
		<mkdir dir="${appbase.dir}" />
		<mkdir dir="${appbase.dir}/web" />

		<copy todir="${appbase.dir}/web" includeemptydirs="true">
			<dirDifference dir="${corebase.dir}/web">
				<blockingPath>
					<pathelement location="${product.modifications.dir}" />
				</blockingPath>
			</dirDifference>
			<fileset dir="${product.modifications.dir}" />
		</copy>

		<patternset id="appbase.patterns">
			<include name="src/**/*" />
			<include name="lib/**/*" />
			<include name="test/**/*" />
			<include name="themes/**/*" />
			<include name="config/*.properties" />
			<include name="config/solr/*" />
			<include name="context.xml" />
		</patternset>

		<copy todir="${appbase.dir}" includeemptydirs="true">
			<dirDifference dir="${corebase.dir}">
				<patternset refid="appbase.patterns" />
				<exclude name="themes/**/*" if="skip.core.themes" />
				<blockingPath>
					<pathelement location="." />
				</blockingPath>
			</dirDifference>
			<fileset dir=".">
				<patternset refid="appbase.patterns" />
			</fileset>
		</copy>
	</target>

	<import file="${vivoProduct.basedir}/build.xml" />

	<!-- ================================= 
	      target: revisionInfo              
	     ================================= -->
	<target name="revisionInfo"
	        depends="vitroCore.revisionInfo"
	        description="--> Store revision info in build">
		<addRevisionInfoLine productName="${ant.project.name}" productCheckoutDir="${basedir}" />
	</target>

	<!-- ================================= 
          target: licenser             
          
          In regular use, checks that all appropriate source files have license tags.
          At release time, applies license text to source files.
          The files are handled as properties so they can be overridden from the command line, if desired.
         ================================= -->
	<target name="licenser" description="--> Check source files for licensing tags">
		<property name="licenser.product.properties.file"
		          location="./config/licenser/licenser.properties" />
		<property name="licenser.core.properties.file"
		          location="${corebase.dir}/config/licenser/licenser.properties" />
		<runLicenserScript productname="${ant.project.name}"
		                   propertiesfile="${licenser.product.properties.file}" />
		<runLicenserScript productname="Vitro core"
		                   propertiesfile="${licenser.core.properties.file}" />
	</target>
</project>
