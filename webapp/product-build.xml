<?xml version="1.0" encoding="UTF-8"?>

<!-- $This file is distributed under the terms of the license in /doc/license.txt$ -->

<!-- ====================================================================== 
     Build script for the Vivo Products.
                   
     jeb228                                                                
     ======================================================================-->
<project name="vivoProduct" default="describe">

	<!--
     This script should not be run on its own. 
     It should only be run from the build script of an individual Product.
    -->
	<fail>
		<condition>
			<equals arg1="${ant.file.vivoProduct}" arg2="${ant.file}" />
		</condition>
        This script should not be run by itself.
        It should be invoked from the build script of a Vivo product.
    </fail>

	<fail unless="inner.basedir"
	      message="The build script for the product must define a value for inner.basedir" />

	<!-- 
		The build directory goes in the product directory. 
		Everything else hangs from the build directory. 
	-->
	<property name="build.dir" location="./.build" />
	<property name="appbase.dir" location="${build.dir}/appBase" />

	<dirname property="vivoProduct.basedir" file="${ant.file.vivoProduct}" />
	<path id="anttasks.classpath">
		<pathelement location="${vivoProduct.basedir}/../utilities/anttasks/classes" />
	</path>

	<!-- - - - - - - - - - - - - - - - - - 
          custom Ant types                      
         - - - - - - - - - - - - - - - - - -->
	<typedef name="dirDifference"
	         classname="edu.cornell.mannlib.vitro.utilities.anttasks.DirDifferenceFileSet"
	         classpathref="anttasks.classpath" />

	<!-- - - - - - - - - - - - - - - - - - 
          target: product-prepare                      
         - - - - - - - - - - - - - - - - - -->
	<target name="product-prepare">
		<mkdir dir="${appbase.dir}" />
		<mkdir dir="${appbase.dir}/web" />

		<copy todir="${appbase.dir}/web" includeemptydirs="true">
			<dirDifference dir="${inner.basedir}/web">
				<blockingPath>
					<pathelement location="${product.modifications.dir}" />
				</blockingPath>
			</dirDifference>
		</copy>
		<copy todir="${appbase.dir}/web" includeemptydirs="true">
			<fileset dir="${product.modifications.dir}" />
		</copy>

		<copy todir="${appbase.dir}/config" includeemptydirs="true">
			<fileset dir="${inner.basedir}/config" />
		</copy>

		<copy todir="${appbase.dir}" includeemptydirs="true">
			<dirDifference dir="${inner.basedir}">
				<include name="src/**/*" />
				<include name="lib/**/*" />
				<include name="test/**/*" />
				<include name="themes/**/*" unless="skip.core.themes"/>
				<include name="context.xml" />
				<blockingPath>
					<pathelement location="." />
				</blockingPath>
			</dirDifference>
		</copy>
		<copy todir="${appbase.dir}" includeemptydirs="true">
			<fileset dir="." erroronmissingdir="false">
				<include name="src/**/*" />
				<include name="lib/**/*" />
				<include name="test/**/*" />
				<include name="themes/**/*" />
				<include name="context.xml" />
			</fileset>
		</copy>
	</target>
	<!-- ================================= 
          target: describe              
         ================================= -->
	<target name="describe" description="--> Describe the targets (this is the default).">
		<innercall target="describe" />
	</target>

	<!-- ================================= 
          target: all              
         ================================= -->
	<target name="all" depends="clean, deploy" description="--> Run 'clean', then 'deploy'" />

	<!-- ================================= 
          target: clean              
         ================================= -->
	<target name="clean" description="--> Delete all artifacts.">
		<innercall target="clean" />
	</target>

	<!-- ================================= 
          target: deploy              
         ================================= -->
	<target name="deploy"
	        depends="product-prepare"
	        description="--> Build the app and install in Tomcat">
		<innercall target="deploy" />
	</target>

	<!-- ================================= 
          target: compile              
         ================================= -->
	<target name="compile" depends="product-prepare" description="--> Compile Java sources.">
		<innercall target="compile" />
	</target>

	<!-- ================================= 
          target: test              
         ================================= -->
	<target name="test" depends="product-prepare" description="--> Run JUnit tests">
		<innercall target="test" />
	</target>

	<!-- ================================= 
	      target: revisionInfo              
	     ================================= -->
	<target name="revisionInfo"
	        depends="product-prepare"
	        description="--> Store revision info in build">
		<innercall target="revisionInfo" />
		<antcall target="productRevisionInfo" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
	      target: productRevisionInfo                      
	     - - - - - - - - - - - - - - - - - -->
	<target name="productRevisionInfo" unless="skipinfo">
		<property name="revisionInfo.product.dir" location="${ant.file}/.." />
		<property name="revisionInfo.build.file" location="${war-resources.dir}/revisionInfo.txt" />

		<java classname="edu.cornell.mannlib.vitro.utilities.revisioninfo.RevisionInfoBuilder"
		      fork="no"
		      failonerror="true">
			<classpath refid="test.run.classpath" />
			<arg value="${ant.project.name}" />
			<arg file="${revisionInfo.product.dir}" />
			<arg file="${revisionInfo.build.file}" />
		</java>
	</target>

	<!-- ================================= 
          target: war              
         ================================= -->
	<target name="war"
	        depends="product-prepare"
	        description="--> Build the app and create a WAR file">
		<innercall target="war" />
	</target>

	<!-- 
	===========================================================================
	===========================================================================
	===========================================================================
	NOT YET USING ANYTHING BELOW HERE
	===========================================================================
	===========================================================================
	===========================================================================
	-->

	<!-- ================================= 
          target: jar              
         ================================= -->
	<target name="jar" depends="revisionInfo" description="--> Build the app and create a JAR file">
		<jar basedir="${build.dir}/war/WEB-INF/classes"
		     destfile="${build.dir}/${webapp.name}.jar" />
	</target>

	<!-- ================================= 
          target: licenser             
          
          In regular use, checks that all appropriate source files have license tags.
          At release time, applies license text to source files.
          
          NOTE: don't override licenser.properties.file from the command line.
          Instead, override licenser.core.properties.file and licenser.product.properties.file
         ================================= -->
	<target name="licenser" description="--> Check source files for licensing tags">
		<!-- Once for the product... -->
		<innercall target="licenser">
			<property name="licenser.properties.file" value="${licenser.product.properties.file}" />
			<property name="licenser.label" value="${ant.project.name}" />
		</innercall>

		<!-- ...and once for the core. -->
		<condition property="licenser.properties.file" value="${licenser.core.properties.file}">
			<isset property="licenser.core.properties.file" />
		</condition>
		<innercall target="licenser">
			<propertyset>
				<propertyref name="licenser.properties.file" />
			</propertyset>
		</innercall>
	</target>

	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	     MACROS
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

	<!--
		Call a target in the inner script.
	-->
	<macrodef name="innercall">
		<attribute name="target" />
		<element name="additionalProperties" implicit="yes" optional="true" />
		<sequential>
			<ant dir="${inner.basedir}" inheritall="false">
				<!-- pass the properties that are needed. -->
				<propertyset>
					<propertyref name="build.dir" />
					<propertyref name="appbase.dir" />
					<propertyref name="skip.core.themes" />
					<propertyref name="deploy.properties.file" />
				</propertyset>
				<additionalProperties />
				<target name="@{target}" />
			</ant>
		</sequential>
	</macrodef>
</project>
